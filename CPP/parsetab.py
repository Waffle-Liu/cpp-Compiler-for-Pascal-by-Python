
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVMODAND ARRAY ASSIGN BEGIN CASE CHAR COLON COMMA CONST DIV DIV DO DOT DOTDOT DOWNTO ELSE END EQUAL FOR FUNCTION GE GOTO GT ID IF INTEGER INTEGER LB LE LP LT MINUS MOD MOD MUL NAME NOT NUMBER OF OR PACKED PLUS PROCEDURE PROGRAM RB READ REAL RECORD REPEAT RP SEMI STRING SYS_CON SYS_FUNCT SYS_PROC SYS_PROC SYS_TYPE SYS_TYPE SYS_TYPE SYS_TYPE THEN TO TYPE UNEQUAL UNTIL VAR WHILE false trueprogram :  program_head  routine  DOT program_head :  PROGRAM  NAME  SEMIroutine :  routine_head  routine_bodysub_routine :  routine_head  routine_bodyroutine_head :  label_part  const_part  type_part  var_part  routine_partlabel_part :  emptyconst_part :  CONST  const_expr_list  \n                    |  emptyconst_expr_list :  const_expr_list  const_expr\n                    |  const_exprconst_expr : NAME EQUAL const_value SEMIconst_value :  INTEGER  \n                    |  REAL  \n                    |  CHAR  \n                    |  STRING  \n                    |  SYS_CON\n                    | true\n                    | falsetype_part :  TYPE type_decl_list  \n                    |  emptytype_decl_list :  type_decl_list  type_definition  \n                    |  type_definitiontype_definition :  NAME  EQUAL  type_decl  SEMItype_decl :  simple_type_decl  \n                    |  array_type_decl  \n                    |  record_type_declsimple_type_decl :  SYS_TYPEsimple_type_decl : NAMEsimple_type_decl : LP  name_list  RPsimple_type_decl : const_value  DOTDOT  const_valuearray_type_decl :  ARRAY  LB  simple_type_decl  RB  OF  type_declrecord_type_decl :  RECORD  field_decl_list  ENDfield_decl_list :  field_decl_list  field_decl  \n                    |  field_declfield_decl :  name_list  COLON  type_decl  SEMIname_list :  name_list  COMMA  NAME  \n                    |  NAMEvar_part :  VAR  var_decl_list  \n                    |  emptyvar_decl_list :  var_decl_list  var_decl  \n                    |  var_declvar_decl :  name_list  COLON  type_decl  SEMIroutine_part :  routine_part  function_decl  \n                    |  routine_part  procedure_decl\n                    |  function_decl  \n                    |  procedure_decl  \n                    | emptyfunction_decl : function_head  SEMI  sub_routine  SEMIfunction_head :  FUNCTION  NAME  parameters  COLON  simple_type_decl procedure_decl :  procedure_head  SEMI  sub_routine  SEMIprocedure_head :  PROCEDURE NAME parameters parameters :  LP  para_decl_list  RP  \n                    |  emptypara_decl_list :  para_decl_list  SEMI  para_type_list \n                    | para_type_listpara_type_list :  var_para_list COLON  simple_type_decl  \n        |  val_para_list  COLON  simple_type_declvar_para_list :  VAR  name_listval_para_list :  name_list\n                        routine_body :  compound_stmtcompound_stmt :  BEGIN  stmt_list  ENDstmt_list :  stmt_list  stmt  SEMI  \n                    |  emptystmt :  INTEGER  COLON  non_label_stmt  \n                    |  non_label_stmtnon_label_stmt :  assign_stmt \n                    | proc_stmt \n                    | compound_stmt \n                    | if_stmt \n                    | repeat_stmt \n                    | while_stmt \n                    | for_stmt \n                    | case_stmt \n                    | goto_stmtassign_stmt :  NAME  ASSIGN  expressionassign_stmt :  NAME LB expression RB ASSIGN expressionassign_stmt :  NAME  DOT  NAME  ASSIGN  expressionproc_stmt :  NAME\n                    |  NAME  LP  args_list  RP\n                    |  SYS_PROC\n                    |  SYS_PROC  LP  expression_list  RP\n                    |  READ  LP  factor  RPif_stmt :  IF  expression  THEN  stmt  else_clauseelse_clause :  ELSE stmt \n                    |  emptyrepeat_stmt :  REPEAT  stmt_list  UNTIL  expressionwhile_stmt :  WHILE  expression  DO stmtfor_stmt :  FOR  NAME  ASSIGN  expression  direction  expression  DO stmtdirection :  TO \n                    | DOWNTOcase_stmt :  CASE expression OF case_expr_list  ENDcase_expr_list :  case_expr_list  case_expr  \n                    |  case_exprcase_expr :  const_value  COLON  stmt  SEMI\n                    |  ID  COLON  stmt  SEMIgoto_stmt :  GOTO  INTEGERexpression_list :  expression_list  COMMA  expression   \n                    |  expressionexpression :  expression  GE  expr  \n                    |  expression  GT  expr  \n                    |  expression  LE  expr\n                    |  expression  LT  expr  \n                    |  expression  EQUAL  expr  \n                    |  expression  UNEQUAL  expr  \n                    |  exprexpr :  expr  PLUS  term  \n                    |  expr  MINUS  term  \n                    |  expr  OR  term  \n                    |  termterm :  term  MUL  factor  \n                    |  term  DIV  factor  \n                    |  term  MOD  factor \n                    |  term  AND  factor  \n                    |  factorfactor : SYS_FUNCT  \n                    |  SYS_FUNCT  LP  args_list  RP  \n        factor : NAME  LP  args_list  RPfactor :  NAME \n                    |  const_value  \n                    |  LP  expression  RP\n                    |  NOT  factor  \n                    |  MINUS  factor  \n                    |  NAME  LB  expression  RBfactor : NAME  DOT  NAMEargs_list :  args_list  COMMA  expression  \n            |  expressionempty :'
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,9,],[0,-1,]),'CONST':([2,6,7,16,136,137,],[-127,14,-6,-2,-127,-127,]),'TYPE':([2,6,7,13,15,16,22,23,53,136,137,153,],[-127,-127,-6,20,-8,-2,-7,-10,-9,-127,-127,-11,]),'VAR':([2,6,7,13,15,16,19,21,22,23,50,51,53,97,136,137,153,191,196,244,],[-127,-127,-6,-127,-8,-2,48,-20,-7,-10,-19,-22,-9,-21,-127,-127,-11,228,-23,228,]),'FUNCTION':([2,6,7,13,15,16,19,21,22,23,47,49,50,51,53,85,86,87,88,93,94,97,134,135,136,137,140,153,196,220,222,230,],[-127,-127,-6,-127,-8,-2,-127,-20,-7,-10,91,-39,-19,-22,-9,91,-45,-46,-47,-38,-41,-21,-43,-44,-127,-127,-40,-11,-23,-48,-50,-42,]),'PROCEDURE':([2,6,7,13,15,16,19,21,22,23,47,49,50,51,53,85,86,87,88,93,94,97,134,135,136,137,140,153,196,220,222,230,],[-127,-127,-6,-127,-8,-2,-127,-20,-7,-10,92,-39,-19,-22,-9,92,-45,-46,-47,-38,-41,-21,-43,-44,-127,-127,-40,-11,-23,-48,-50,-42,]),'BEGIN':([2,5,6,7,12,13,15,16,17,18,19,21,22,23,42,47,49,50,51,53,55,56,80,85,86,87,88,93,94,97,109,131,134,135,136,137,140,153,188,196,208,218,219,220,222,230,250,],[-127,12,-127,-6,-127,-127,-8,-2,12,-63,-127,-20,-7,-10,-127,-127,-39,-19,-22,-9,-62,12,12,-5,-45,-46,-47,-38,-41,-21,12,12,-43,-44,-127,-127,-40,-11,12,-23,12,12,12,-48,-50,-42,12,]),'NAME':([3,12,14,17,18,20,22,23,41,42,43,44,45,48,50,51,53,55,56,57,58,59,60,61,62,66,69,72,80,91,92,93,94,97,98,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,128,130,131,132,140,141,142,149,152,153,155,157,159,191,196,199,200,201,203,208,213,214,215,218,219,223,228,230,235,236,244,245,246,250,256,257,],[8,-127,24,38,-63,52,24,-10,70,-127,70,82,70,96,52,-22,-9,-62,38,70,70,103,70,70,70,70,70,70,38,138,139,96,-41,-21,143,38,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,179,70,38,70,-40,143,195,96,96,-11,70,70,70,96,-23,143,96,-34,70,38,70,-89,-90,38,38,143,96,-42,-33,143,96,143,143,38,143,-35,]),'DOT':([4,10,11,25,38,70,],[9,-3,-60,-61,59,128,]),'SEMI':([8,11,25,26,28,29,30,31,32,33,34,35,36,37,38,39,64,65,67,68,70,71,73,74,75,76,77,78,79,84,89,90,99,100,101,123,129,139,143,144,145,146,147,148,156,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,180,181,187,189,192,193,194,204,207,209,210,211,212,216,221,224,225,231,232,234,237,238,240,241,242,243,249,253,254,255,258,259,],[16,-60,-61,55,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-78,-80,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-96,136,137,153,-64,-75,-122,-121,-127,-28,196,-24,-25,-26,-27,-79,-81,-82,-127,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,-86,-87,220,222,-53,-51,230,-77,-83,-85,-116,-117,-123,-91,-4,244,-55,-29,-30,-32,-76,-84,251,252,-49,-52,257,-54,-56,-57,-88,-31,]),'END':([12,17,18,55,183,184,200,201,217,235,251,252,257,],[-127,25,-63,-62,216,-93,234,-34,-92,-33,-94,-95,-35,]),'INTEGER':([12,17,18,41,42,43,45,46,54,55,57,58,60,61,62,66,69,72,80,98,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,131,132,133,141,155,157,159,183,184,198,199,203,208,213,214,215,217,218,219,223,236,245,246,250,251,252,256,],[-127,27,-63,73,-127,73,73,84,73,-62,73,73,73,73,73,73,73,73,27,73,27,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,27,73,73,73,73,73,73,73,-93,73,73,73,27,73,-89,-90,-92,27,27,73,73,73,73,27,-94,-95,73,]),'SYS_PROC':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,39,-63,-127,-62,39,39,39,39,39,39,39,39,]),'READ':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,40,-63,-127,-62,40,40,40,40,40,40,40,40,]),'IF':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,41,-63,-127,-62,41,41,41,41,41,41,41,41,]),'REPEAT':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,42,-63,-127,-62,42,42,42,42,42,42,42,42,]),'WHILE':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,43,-63,-127,-62,43,43,43,43,43,43,43,43,]),'FOR':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,44,-63,-127,-62,44,44,44,44,44,44,44,44,]),'CASE':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,45,-63,-127,-62,45,45,45,45,45,45,45,45,]),'GOTO':([12,17,18,42,55,56,80,109,131,208,218,219,250,],[-127,46,-63,-127,-62,46,46,46,46,46,46,46,46,]),'UNTIL':([18,42,55,80,],[-63,-127,-62,130,]),'EQUAL':([24,52,63,64,65,67,68,70,71,73,74,75,76,77,78,79,81,83,101,102,105,107,123,125,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,180,182,204,205,206,210,211,212,237,239,],[54,98,114,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,114,114,114,114,114,114,-122,114,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,114,-124,114,114,114,114,114,-116,-117,-123,114,114,]),'ELSE':([25,28,29,30,31,32,33,34,35,36,37,38,39,64,65,67,68,70,71,73,74,75,76,77,78,79,84,100,101,123,129,156,158,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,180,181,204,207,209,210,211,212,216,237,238,258,],[-61,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-78,-80,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-96,-64,-75,-122,-121,-79,-81,-82,208,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,-86,-87,-77,-83,-85,-116,-117,-123,-91,-76,-84,-88,]),'COLON':([27,73,74,75,76,77,78,79,95,96,138,185,186,190,192,195,202,226,227,229,243,247,],[56,-12,-13,-14,-15,-16,-17,-18,141,-37,-127,218,219,223,-53,-36,236,245,246,-59,-52,-58,]),'ASSIGN':([38,82,103,154,],[57,132,155,203,]),'LB':([38,70,151,],[58,127,199,]),'LP':([38,39,40,41,43,45,57,58,60,61,62,66,68,69,70,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,138,139,141,155,157,159,199,203,213,214,215,223,236,245,246,256,],[60,61,62,69,69,69,69,69,69,69,69,69,124,69,126,69,149,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,191,191,149,69,69,69,149,69,69,-89,-90,149,149,149,149,149,]),'SYS_FUNCT':([41,43,45,57,58,60,61,62,66,69,72,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,155,157,159,203,213,214,215,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-89,-90,]),'NOT':([41,43,45,57,58,60,61,62,66,69,72,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,155,157,159,203,213,214,215,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-89,-90,]),'MINUS':([41,43,45,57,58,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,129,130,132,155,157,159,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,203,210,211,212,213,214,215,],[66,66,66,66,66,66,66,66,117,-109,66,-114,-115,66,-118,-119,66,-12,-13,-14,-15,-16,-17,-18,66,66,66,66,66,66,66,66,66,66,66,66,66,-122,66,66,66,-121,66,66,66,66,66,117,117,117,117,117,117,-106,-107,-108,-110,-111,-112,-113,-120,-124,66,-116,-117,-123,66,-89,-90,]),'REAL':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,184,198,199,203,213,214,215,217,223,236,245,246,251,252,256,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-93,74,74,74,74,-89,-90,-92,74,74,74,74,-94,-95,74,]),'CHAR':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,184,198,199,203,213,214,215,217,223,236,245,246,251,252,256,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-93,75,75,75,75,-89,-90,-92,75,75,75,75,-94,-95,75,]),'STRING':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,184,198,199,203,213,214,215,217,223,236,245,246,251,252,256,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-93,76,76,76,76,-89,-90,-92,76,76,76,76,-94,-95,76,]),'SYS_CON':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,184,198,199,203,213,214,215,217,223,236,245,246,251,252,256,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-93,77,77,77,77,-89,-90,-92,77,77,77,77,-94,-95,77,]),'true':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,184,198,199,203,213,214,215,217,223,236,245,246,251,252,256,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-93,78,78,78,78,-89,-90,-92,78,78,78,78,-94,-95,78,]),'false':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,184,198,199,203,213,214,215,217,223,236,245,246,251,252,256,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-93,79,79,79,79,-89,-90,-92,79,79,79,79,-94,-95,79,]),'THEN':([63,64,65,67,68,70,71,73,74,75,76,77,78,79,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,210,211,212,],[109,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'GE':([63,64,65,67,68,70,71,73,74,75,76,77,78,79,81,83,101,102,105,107,123,125,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,180,182,204,205,206,210,211,212,237,239,],[110,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,110,110,110,110,110,110,-122,110,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,110,-124,110,110,110,110,110,-116,-117,-123,110,110,]),'GT':([63,64,65,67,68,70,71,73,74,75,76,77,78,79,81,83,101,102,105,107,123,125,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,180,182,204,205,206,210,211,212,237,239,],[111,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,111,111,111,111,111,111,-122,111,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,111,-124,111,111,111,111,111,-116,-117,-123,111,111,]),'LE':([63,64,65,67,68,70,71,73,74,75,76,77,78,79,81,83,101,102,105,107,123,125,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,180,182,204,205,206,210,211,212,237,239,],[112,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,112,112,112,112,112,112,-122,112,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,112,-124,112,112,112,112,112,-116,-117,-123,112,112,]),'LT':([63,64,65,67,68,70,71,73,74,75,76,77,78,79,81,83,101,102,105,107,123,125,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,180,182,204,205,206,210,211,212,237,239,],[113,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,113,113,113,113,113,113,-122,113,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,113,-124,113,113,113,113,113,-116,-117,-123,113,113,]),'UNEQUAL':([63,64,65,67,68,70,71,73,74,75,76,77,78,79,81,83,101,102,105,107,123,125,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,180,182,204,205,206,210,211,212,237,239,],[115,-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,115,115,115,115,115,115,-122,115,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,115,-124,115,115,115,115,115,-116,-117,-123,115,115,]),'DO':([64,65,67,68,70,71,73,74,75,76,77,78,79,81,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,210,211,212,239,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,131,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,-116,-117,-123,250,]),'OF':([64,65,67,68,70,71,73,74,75,76,77,78,79,83,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,210,211,212,248,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,133,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,-116,-117,-123,256,]),'RB':([64,65,67,68,70,71,73,74,75,76,77,78,79,102,123,129,143,148,162,163,164,165,166,167,168,169,170,171,172,173,174,176,178,179,210,211,212,231,232,233,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,154,-122,-121,-28,-27,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,212,-124,-116,-117,-123,-29,-30,248,]),'RP':([64,65,67,68,70,71,73,74,75,76,77,78,79,96,104,105,106,107,108,123,125,129,143,148,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,179,195,197,205,206,210,211,212,224,225,231,232,253,254,255,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-37,156,-126,158,-98,160,-122,176,-121,-28,-27,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,210,-120,211,-124,-36,231,-125,-97,-116,-117,-123,243,-55,-29,-30,-54,-56,-57,]),'COMMA':([64,65,67,68,70,71,73,74,75,76,77,78,79,95,96,104,105,106,107,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,179,195,197,202,205,206,210,211,212,229,247,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,142,-37,157,-126,159,-98,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,157,-120,157,-124,-36,142,142,-125,-97,-116,-117,-123,142,142,]),'TO':([64,65,67,68,70,71,73,74,75,76,77,78,79,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,182,210,211,212,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,214,-116,-117,-123,]),'DOWNTO':([64,65,67,68,70,71,73,74,75,76,77,78,79,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,182,210,211,212,],[-105,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,-99,-100,-101,-102,-103,-104,-106,-107,-108,-110,-111,-112,-113,-120,-124,215,-116,-117,-123,]),'PLUS':([64,65,67,68,70,71,73,74,75,76,77,78,79,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,210,211,212,],[116,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,116,116,116,116,116,116,-106,-107,-108,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'OR':([64,65,67,68,70,71,73,74,75,76,77,78,79,123,129,162,163,164,165,166,167,168,169,170,171,172,173,174,176,179,210,211,212,],[118,-109,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,118,118,118,118,118,118,-106,-107,-108,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'MUL':([65,67,68,70,71,73,74,75,76,77,78,79,123,129,168,169,170,171,172,173,174,176,179,210,211,212,],[119,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,119,119,119,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'DIV':([65,67,68,70,71,73,74,75,76,77,78,79,123,129,168,169,170,171,172,173,174,176,179,210,211,212,],[120,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,120,120,120,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'MOD':([65,67,68,70,71,73,74,75,76,77,78,79,123,129,168,169,170,171,172,173,174,176,179,210,211,212,],[121,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,121,121,121,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'AND':([65,67,68,70,71,73,74,75,76,77,78,79,123,129,168,169,170,171,172,173,174,176,179,210,211,212,],[122,-114,-115,-118,-119,-12,-13,-14,-15,-16,-17,-18,-122,-121,122,122,122,-110,-111,-112,-113,-120,-124,-116,-117,-123,]),'DOTDOT':([73,74,75,76,77,78,79,150,],[-12,-13,-14,-15,-16,-17,-18,198,]),'SYS_TYPE':([98,141,199,223,236,245,246,256,],[148,148,148,148,148,148,148,148,]),'ARRAY':([98,141,236,256,],[151,151,151,151,]),'RECORD':([98,141,236,256,],[152,152,152,152,]),'ID':([133,183,184,217,251,252,],[186,186,-93,-92,-94,-95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_head':([0,],[2,]),'routine':([2,],[4,]),'routine_head':([2,136,137,],[5,188,188,]),'label_part':([2,136,137,],[6,6,6,]),'empty':([2,6,12,13,19,42,47,136,137,138,139,161,],[7,15,18,21,49,18,88,7,7,192,192,209,]),'routine_body':([5,188,],[10,221,]),'compound_stmt':([5,17,56,80,109,131,188,208,218,219,250,],[11,31,31,31,31,31,11,31,31,31,31,]),'const_part':([6,],[13,]),'stmt_list':([12,42,],[17,80,]),'type_part':([13,],[19,]),'const_expr_list':([14,],[22,]),'const_expr':([14,22,],[23,53,]),'stmt':([17,80,109,131,208,218,219,250,],[26,26,161,181,238,240,241,258,]),'non_label_stmt':([17,56,80,109,131,208,218,219,250,],[28,100,28,28,28,28,28,28,28,]),'assign_stmt':([17,56,80,109,131,208,218,219,250,],[29,29,29,29,29,29,29,29,29,]),'proc_stmt':([17,56,80,109,131,208,218,219,250,],[30,30,30,30,30,30,30,30,30,]),'if_stmt':([17,56,80,109,131,208,218,219,250,],[32,32,32,32,32,32,32,32,32,]),'repeat_stmt':([17,56,80,109,131,208,218,219,250,],[33,33,33,33,33,33,33,33,33,]),'while_stmt':([17,56,80,109,131,208,218,219,250,],[34,34,34,34,34,34,34,34,34,]),'for_stmt':([17,56,80,109,131,208,218,219,250,],[35,35,35,35,35,35,35,35,35,]),'case_stmt':([17,56,80,109,131,208,218,219,250,],[36,36,36,36,36,36,36,36,36,]),'goto_stmt':([17,56,80,109,131,208,218,219,250,],[37,37,37,37,37,37,37,37,37,]),'var_part':([19,],[47,]),'type_decl_list':([20,],[50,]),'type_definition':([20,50,],[51,97,]),'expression':([41,43,45,57,58,60,61,69,124,126,127,130,132,155,157,159,203,213,],[63,81,83,101,102,105,107,125,105,105,178,180,182,204,205,206,237,239,]),'expr':([41,43,45,57,58,60,61,69,110,111,112,113,114,115,124,126,127,130,132,155,157,159,203,213,],[64,64,64,64,64,64,64,64,162,163,164,165,166,167,64,64,64,64,64,64,64,64,64,64,]),'term':([41,43,45,57,58,60,61,69,110,111,112,113,114,115,116,117,118,124,126,127,130,132,155,157,159,203,213,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,168,169,170,65,65,65,65,65,65,65,65,65,65,]),'factor':([41,43,45,57,58,60,61,62,66,69,72,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,155,157,159,203,213,],[67,67,67,67,67,67,67,108,123,67,129,67,67,67,67,67,67,67,67,67,171,172,173,174,67,67,67,67,67,67,67,67,67,67,]),'const_value':([41,43,45,54,57,58,60,61,62,66,69,72,98,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,130,132,133,141,155,157,159,183,198,199,203,213,223,236,245,246,256,],[71,71,71,99,71,71,71,71,71,71,71,71,150,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,185,150,71,71,71,185,232,150,71,71,150,150,150,150,150,]),'routine_part':([47,],[85,]),'function_decl':([47,85,],[86,134,]),'procedure_decl':([47,85,],[87,135,]),'function_head':([47,85,],[89,89,]),'procedure_head':([47,85,],[90,90,]),'var_decl_list':([48,],[93,]),'var_decl':([48,93,],[94,140,]),'name_list':([48,93,149,152,191,200,228,244,],[95,95,197,202,229,202,247,229,]),'args_list':([60,124,126,],[104,175,177,]),'expression_list':([61,],[106,]),'type_decl':([98,141,236,256,],[144,194,249,259,]),'simple_type_decl':([98,141,199,223,236,245,246,256,],[145,145,233,242,145,254,255,145,]),'array_type_decl':([98,141,236,256,],[146,146,146,146,]),'record_type_decl':([98,141,236,256,],[147,147,147,147,]),'case_expr_list':([133,],[183,]),'case_expr':([133,183,],[184,217,]),'sub_routine':([136,137,],[187,189,]),'parameters':([138,139,],[190,193,]),'field_decl_list':([152,],[200,]),'field_decl':([152,200,],[201,235,]),'else_clause':([161,],[207,]),'direction':([182,],[213,]),'para_decl_list':([191,],[224,]),'para_type_list':([191,244,],[225,253,]),'var_para_list':([191,244,],[226,226,]),'val_para_list':([191,244,],[227,227,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_head routine DOT','program',3,'p_program','CPP_yacc.py',19),
  ('program_head -> PROGRAM NAME SEMI','program_head',3,'p_program_head','CPP_yacc.py',26),
  ('routine -> routine_head routine_body','routine',2,'p_routine','CPP_yacc.py',30),
  ('sub_routine -> routine_head routine_body','sub_routine',2,'p_sub_routine','CPP_yacc.py',34),
  ('routine_head -> label_part const_part type_part var_part routine_part','routine_head',5,'p_routine_head','CPP_yacc.py',39),
  ('label_part -> empty','label_part',1,'p_label_part','CPP_yacc.py',44),
  ('const_part -> CONST const_expr_list','const_part',2,'p_const_part','CPP_yacc.py',48),
  ('const_part -> empty','const_part',1,'p_const_part','CPP_yacc.py',49),
  ('const_expr_list -> const_expr_list const_expr','const_expr_list',2,'p_const_expr_list','CPP_yacc.py',57),
  ('const_expr_list -> const_expr','const_expr_list',1,'p_const_expr_list','CPP_yacc.py',58),
  ('const_expr -> NAME EQUAL const_value SEMI','const_expr',4,'p_const_expr','CPP_yacc.py',65),
  ('const_value -> INTEGER','const_value',1,'p_const_value','CPP_yacc.py',71),
  ('const_value -> REAL','const_value',1,'p_const_value','CPP_yacc.py',72),
  ('const_value -> CHAR','const_value',1,'p_const_value','CPP_yacc.py',73),
  ('const_value -> STRING','const_value',1,'p_const_value','CPP_yacc.py',74),
  ('const_value -> SYS_CON','const_value',1,'p_const_value','CPP_yacc.py',75),
  ('const_value -> true','const_value',1,'p_const_value','CPP_yacc.py',76),
  ('const_value -> false','const_value',1,'p_const_value','CPP_yacc.py',77),
  ('type_part -> TYPE type_decl_list','type_part',2,'p_type_part','CPP_yacc.py',82),
  ('type_part -> empty','type_part',1,'p_type_part','CPP_yacc.py',83),
  ('type_decl_list -> type_decl_list type_definition','type_decl_list',2,'p_type_decl_list','CPP_yacc.py',91),
  ('type_decl_list -> type_definition','type_decl_list',1,'p_type_decl_list','CPP_yacc.py',92),
  ('type_definition -> NAME EQUAL type_decl SEMI','type_definition',4,'p_type_definition','CPP_yacc.py',100),
  ('type_decl -> simple_type_decl','type_decl',1,'p_type_decl','CPP_yacc.py',105),
  ('type_decl -> array_type_decl','type_decl',1,'p_type_decl','CPP_yacc.py',106),
  ('type_decl -> record_type_decl','type_decl',1,'p_type_decl','CPP_yacc.py',107),
  ('simple_type_decl -> SYS_TYPE','simple_type_decl',1,'p_simple_type_decl_1','CPP_yacc.py',122),
  ('simple_type_decl -> NAME','simple_type_decl',1,'p_simple_type_decl_2','CPP_yacc.py',126),
  ('simple_type_decl -> LP name_list RP','simple_type_decl',3,'p_simple_type_decl_3','CPP_yacc.py',130),
  ('simple_type_decl -> const_value DOTDOT const_value','simple_type_decl',3,'p_simple_type_decl_4','CPP_yacc.py',134),
  ('array_type_decl -> ARRAY LB simple_type_decl RB OF type_decl','array_type_decl',6,'p_array_type_decl','CPP_yacc.py',138),
  ('record_type_decl -> RECORD field_decl_list END','record_type_decl',3,'p_record_type_decl','CPP_yacc.py',142),
  ('field_decl_list -> field_decl_list field_decl','field_decl_list',2,'p_field_decl_list','CPP_yacc.py',147),
  ('field_decl_list -> field_decl','field_decl_list',1,'p_field_decl_list','CPP_yacc.py',148),
  ('field_decl -> name_list COLON type_decl SEMI','field_decl',4,'p_field_decl','CPP_yacc.py',156),
  ('name_list -> name_list COMMA NAME','name_list',3,'p_name_list','CPP_yacc.py',161),
  ('name_list -> NAME','name_list',1,'p_name_list','CPP_yacc.py',162),
  ('var_part -> VAR var_decl_list','var_part',2,'p_var_part','CPP_yacc.py',170),
  ('var_part -> empty','var_part',1,'p_var_part','CPP_yacc.py',171),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list','CPP_yacc.py',178),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list','CPP_yacc.py',179),
  ('var_decl -> name_list COLON type_decl SEMI','var_decl',4,'p_var_decl','CPP_yacc.py',187),
  ('routine_part -> routine_part function_decl','routine_part',2,'p_routine_part','CPP_yacc.py',192),
  ('routine_part -> routine_part procedure_decl','routine_part',2,'p_routine_part','CPP_yacc.py',193),
  ('routine_part -> function_decl','routine_part',1,'p_routine_part','CPP_yacc.py',194),
  ('routine_part -> procedure_decl','routine_part',1,'p_routine_part','CPP_yacc.py',195),
  ('routine_part -> empty','routine_part',1,'p_routine_part','CPP_yacc.py',196),
  ('function_decl -> function_head SEMI sub_routine SEMI','function_decl',4,'p_function_decl','CPP_yacc.py',203),
  ('function_head -> FUNCTION NAME parameters COLON simple_type_decl','function_head',5,'p_function_head','CPP_yacc.py',208),
  ('procedure_decl -> procedure_head SEMI sub_routine SEMI','procedure_decl',4,'p_procedure_decl','CPP_yacc.py',213),
  ('procedure_head -> PROCEDURE NAME parameters','procedure_head',3,'p_procedure_head','CPP_yacc.py',218),
  ('parameters -> LP para_decl_list RP','parameters',3,'p_parameters','CPP_yacc.py',223),
  ('parameters -> empty','parameters',1,'p_parameters','CPP_yacc.py',224),
  ('para_decl_list -> para_decl_list SEMI para_type_list','para_decl_list',3,'p_para_decl_list','CPP_yacc.py',232),
  ('para_decl_list -> para_type_list','para_decl_list',1,'p_para_decl_list','CPP_yacc.py',233),
  ('para_type_list -> var_para_list COLON simple_type_decl','para_type_list',3,'p_para_type_list','CPP_yacc.py',241),
  ('para_type_list -> val_para_list COLON simple_type_decl','para_type_list',3,'p_para_type_list','CPP_yacc.py',242),
  ('var_para_list -> VAR name_list','var_para_list',2,'p_var_para_list','CPP_yacc.py',249),
  ('val_para_list -> name_list','val_para_list',1,'p_val_para_list','CPP_yacc.py',254),
  ('routine_body -> compound_stmt','routine_body',1,'p_routine_body','CPP_yacc.py',261),
  ('compound_stmt -> BEGIN stmt_list END','compound_stmt',3,'p_compound_stmt','CPP_yacc.py',266),
  ('stmt_list -> stmt_list stmt SEMI','stmt_list',3,'p_stmt_list','CPP_yacc.py',271),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','CPP_yacc.py',272),
  ('stmt -> INTEGER COLON non_label_stmt','stmt',3,'p_stmt','CPP_yacc.py',279),
  ('stmt -> non_label_stmt','stmt',1,'p_stmt','CPP_yacc.py',280),
  ('non_label_stmt -> assign_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',288),
  ('non_label_stmt -> proc_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',289),
  ('non_label_stmt -> compound_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',290),
  ('non_label_stmt -> if_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',291),
  ('non_label_stmt -> repeat_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',292),
  ('non_label_stmt -> while_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',293),
  ('non_label_stmt -> for_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',294),
  ('non_label_stmt -> case_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',295),
  ('non_label_stmt -> goto_stmt','non_label_stmt',1,'p_non_label_stmt','CPP_yacc.py',296),
  ('assign_stmt -> NAME ASSIGN expression','assign_stmt',3,'p_assign_stmt_1','CPP_yacc.py',305),
  ('assign_stmt -> NAME LB expression RB ASSIGN expression','assign_stmt',6,'p_assign_stmt_2','CPP_yacc.py',309),
  ('assign_stmt -> NAME DOT NAME ASSIGN expression','assign_stmt',5,'p_assign_stmt_3','CPP_yacc.py',313),
  ('proc_stmt -> NAME','proc_stmt',1,'p_proc_stmt','CPP_yacc.py',317),
  ('proc_stmt -> NAME LP args_list RP','proc_stmt',4,'p_proc_stmt','CPP_yacc.py',318),
  ('proc_stmt -> SYS_PROC','proc_stmt',1,'p_proc_stmt','CPP_yacc.py',319),
  ('proc_stmt -> SYS_PROC LP expression_list RP','proc_stmt',4,'p_proc_stmt','CPP_yacc.py',320),
  ('proc_stmt -> READ LP factor RP','proc_stmt',4,'p_proc_stmt','CPP_yacc.py',321),
  ('if_stmt -> IF expression THEN stmt else_clause','if_stmt',5,'p_if_stmt','CPP_yacc.py',329),
  ('else_clause -> ELSE stmt','else_clause',2,'p_else_clause','CPP_yacc.py',334),
  ('else_clause -> empty','else_clause',1,'p_else_clause','CPP_yacc.py',335),
  ('repeat_stmt -> REPEAT stmt_list UNTIL expression','repeat_stmt',4,'p_repeat_stmt','CPP_yacc.py',343),
  ('while_stmt -> WHILE expression DO stmt','while_stmt',4,'p_while_stmt','CPP_yacc.py',348),
  ('for_stmt -> FOR NAME ASSIGN expression direction expression DO stmt','for_stmt',8,'p_for_stmt','CPP_yacc.py',353),
  ('direction -> TO','direction',1,'p_direction','CPP_yacc.py',358),
  ('direction -> DOWNTO','direction',1,'p_direction','CPP_yacc.py',359),
  ('case_stmt -> CASE expression OF case_expr_list END','case_stmt',5,'p_case_stmt','CPP_yacc.py',364),
  ('case_expr_list -> case_expr_list case_expr','case_expr_list',2,'p_case_expr_list','CPP_yacc.py',369),
  ('case_expr_list -> case_expr','case_expr_list',1,'p_case_expr_list','CPP_yacc.py',370),
  ('case_expr -> const_value COLON stmt SEMI','case_expr',4,'p_case_expr','CPP_yacc.py',378),
  ('case_expr -> ID COLON stmt SEMI','case_expr',4,'p_case_expr','CPP_yacc.py',379),
  ('goto_stmt -> GOTO INTEGER','goto_stmt',2,'p_goto_stmt','CPP_yacc.py',384),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','CPP_yacc.py',389),
  ('expression_list -> expression','expression_list',1,'p_expression_list','CPP_yacc.py',390),
  ('expression -> expression GE expr','expression',3,'p_expression','CPP_yacc.py',398),
  ('expression -> expression GT expr','expression',3,'p_expression','CPP_yacc.py',399),
  ('expression -> expression LE expr','expression',3,'p_expression','CPP_yacc.py',400),
  ('expression -> expression LT expr','expression',3,'p_expression','CPP_yacc.py',401),
  ('expression -> expression EQUAL expr','expression',3,'p_expression','CPP_yacc.py',402),
  ('expression -> expression UNEQUAL expr','expression',3,'p_expression','CPP_yacc.py',403),
  ('expression -> expr','expression',1,'p_expression','CPP_yacc.py',404),
  ('expr -> expr PLUS term','expr',3,'p_expr','CPP_yacc.py',411),
  ('expr -> expr MINUS term','expr',3,'p_expr','CPP_yacc.py',412),
  ('expr -> expr OR term','expr',3,'p_expr','CPP_yacc.py',413),
  ('expr -> term','expr',1,'p_expr','CPP_yacc.py',414),
  ('term -> term MUL factor','term',3,'p_term','CPP_yacc.py',427),
  ('term -> term DIV factor','term',3,'p_term','CPP_yacc.py',428),
  ('term -> term MOD factor','term',3,'p_term','CPP_yacc.py',429),
  ('term -> term AND factor','term',3,'p_term','CPP_yacc.py',430),
  ('term -> factor','term',1,'p_term','CPP_yacc.py',431),
  ('factor -> SYS_FUNCT','factor',1,'p_factor_func','CPP_yacc.py',460),
  ('factor -> SYS_FUNCT LP args_list RP','factor',4,'p_factor_func','CPP_yacc.py',461),
  ('factor -> NAME LP args_list RP','factor',4,'p_factor_arr','CPP_yacc.py',469),
  ('factor -> NAME','factor',1,'p_factor_1','CPP_yacc.py',474),
  ('factor -> const_value','factor',1,'p_factor_1','CPP_yacc.py',475),
  ('factor -> LP expression RP','factor',3,'p_factor_1','CPP_yacc.py',476),
  ('factor -> NOT factor','factor',2,'p_factor_1','CPP_yacc.py',477),
  ('factor -> MINUS factor','factor',2,'p_factor_1','CPP_yacc.py',478),
  ('factor -> NAME LB expression RB','factor',4,'p_factor_1','CPP_yacc.py',479),
  ('factor -> NAME DOT NAME','factor',3,'p_factor_2','CPP_yacc.py',490),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','CPP_yacc.py',495),
  ('args_list -> expression','args_list',1,'p_args_list','CPP_yacc.py',496),
  ('empty -> <empty>','empty',0,'p_empty','CPP_yacc.py',518),
]
